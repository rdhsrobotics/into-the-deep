package org.riverdell.robotics.teleop;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.BNO055IMU;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.robotcore.external.navigation.AngleUnit;
import com.qualcomm.robotcore.external.navigation.AxesOrder;
import com.qualcomm.robotcore.external.navigation.AxesReference;
import com.qualcomm.robotcore.external.navigation.Orientation;
import com.qualcomm.robotcore.hardware.Gamepad;

import java.util.Arrays;

@TeleOp(name="Centric OpMode", group="Linear OpMode")
public class FieldCentric extends LinearOpMode {
    
    public class MecanumDrive {
        private DcMotor frontLeft;
        private DcMotor frontRight;
        private DcMotor backRight;
        private DcMotor backLeft;
        private BNO055IMU imu;
        private Orientation angles;

        void init(HardwareMap hwMap) {
            frontLeft = hwMap.get(DcMotor.class, "front_left_motor");
            frontLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            frontRight = hwMap.get(DcMotor.class, "front_right_motor");
            frontRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            backLeft = hwMap.get(DcMotor.class, "back_left_motor");
            backLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            backRight = hwMap.get(DcMotor.class, "back_right_motor");
            backRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

            frontLeft.setDirection(DcMotorSimple.Direction.REVERSE);
            backLeft.setDirection(DcMotorSimple.Direction.REVERSE);

            BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
            parameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;

            imu = hwMap.get(BNO055IMU.class, "imu");
            imu.initialize(parameters);
        }

        void driveMecanum(Gamepad gamepad1) {
            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            double heading = angles.firstAngle;
            double x = -gamepad1.left_stick_x;
            double y = gamepad1.left_stick_y;
            double angle = Math.toDegrees(Math.atan2(y, x)) + 180;
            double turn = gamepad1.right_trigger - gamepad1.left_trigger;
            double magnitude = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
            double v1 = magnitude * Math.sin(Math.toRadians((angle - heading) + 45));
            double v2 = magnitude * Math.sin(Math.toRadians((angle - heading) - 45));
            double[] powers = {
                v1 + turn,
                v2 + turn,
                v2 - turn,
                v1 - turn
            };

            scale(powers);

            frontLeft.setPower(powers[0]);
            backLeft.setPower(powers[1]);
            frontRight.setPower(powers[2]);
            backRight.setPower(powers[3]);
        }

        private void scale(double[] powers) {
            double maxPower = 0;
            for (double power : powers) {
                maxPower = Math.max(maxPower, Math.abs(power));
            }
            if (maxPower > 1) {
                for (int i = 0; i < powers.length; i++) {
                    powers[i] /= maxPower;
                }
            } else {
                for (int i = 0; i < powers.length; i++) {
                    powers[i] = (1 / Math.sin(Math.toRadians(135))) * powers[i];
                }
            }
            System.out.println(Arrays.toString(powers));
        }
    }

    @Override
    public void runOpMode() {
        MecanumDrive mecanumDrive = new MecanumDrive();
        mecanumDrive.init(hardwareMap);
        waitForStart();

        while (opModeIsActive()) {
            mecanumDrive.driveMecanum(gamepad1);
        }
    }
}
